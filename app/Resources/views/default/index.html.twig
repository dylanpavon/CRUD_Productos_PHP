{% extends 'base.html.twig' %} 
{% block body %}
<div class="container px-4 px-lg-5 mt-5">
    {% for label, messages in app.session.flashBag.all() %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
    {% endfor %}
  <!-- Div para mensajes de error o éxito -->
  <div id="message-container"  class="alert-dismissible fade show">
  </div>

    <!-- Div Usr Logueado -->
    <div class="container px-4 px-lg-5 mt-5" id="usrLogueado" style="display: none;">
      <button  type="button" id="cerrarSesion" class="btn btn-secondary position-absolute top-right" id="cornerButton">Cerrar sesión</button>
      <h3>Bienvenido!</h3>
      <br>
      <div>
        <h4>Gestionar Categorías</h4>
      <form action="{{ path('category_index') }}" method="post" id="lstCategorias">
          <select class="form-select mb-1" aria-label="Default select example" id="categorySelect">
              <option selected disabled id="defaultOption">Categorías</option>
          </select>
          <button type="button" class="btn btn-info mt-1" id="modifyCategoryBtn">Modificar</button>
          <button type="button"  class="btn btn-danger mt-1 delete-btn" id="deleteCategoryBtn">Eliminar</button>
          <button type="button" class="btn btn-success mt-1" id="createCategoryBtn">Crear Nueva</button>
      </form>
    </div>
     
      <!-- Modal Crear/Modificar Categorías-->
  <div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="categoryModalLabel">Crear/Modificar Categoría</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
    <form id="categoryForm" method="POST">
      <div class="modal-body">
          <div class="form-group">
            <input type="text" class="form-control" id="categoryName" placeholder="Nombre Categoría" name="categoryName" required>
          </div>
          <div class="form-group">
            <input type="text" class="form-control" id="categoryIcon" placeholder="Src del Ícono" name="categoryIcon">
          </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        <button type="submit" class="btn btn-primary" id="saveCategory">Guardar</button>
      </div>
    </form>

    </div>
  </div>
  </div>

    <!-- Modal Crear/Modificar Productos-->
        <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Crear/Modificar Categoría</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
            <form id="productForm" method="POST">
              <div class="modal-body">
                  <div class="form-group">
                    <input type="text" class="form-control" id="productName" placeholder="Nombre Producto" name="productName" required>
                  </div>
                  <div class="form-group">
                    <select class="form-select mb-1" aria-label="Default select example" id="productCategorySelect">
                      <option selected disabled id="defaultOption">Categorías</option>
                      {% for p in products %}
                      <option value="{{p.category.id}}">{{p.category.name}}</option>
                      {% endfor %}
                  </select>
                  </div>
                  <div class="form-group">
                    <input type="text" class="form-control" id="productImg" placeholder="Src de la Imagen" name="productImg">
                  </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                <button type="submit" class="btn btn-primary" id="saveProduct">Guardar</button>
              </div>
            </form>
        
            </div>
          </div>
          </div>

  <!--Modal Eliminar-->
  <form action="" id="frmEliminar" method="post">
    <div class="modal" tabindex="-1" id="deleteModal">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Eliminar</h5>
            <button type="button" class="btn-close" data-dismiss="modal" aria-label="close"></button>
          </div>
          <div class="modal-body">
            <p>Realmente desea eliminar este elemento?</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-danger confirmDelete">Eliminar</button>
          </div>
        </div>
      </div>
    </div>
  </form>
  
  </div> <!-- Final Div Logueado-->

    <!-- Form Registro -->
    <div class="container px-4 px-lg-5 mt-5">
      <form action="{{ path('user_new') }}" method="post" id="userRegistro">
        <h3 class="mb-3">Registro de Nuevos Usuarios</h3>
        <div class="mb-3 row">
            <label>Email</label>
            <div class="col-sm-10">
              <input
                type="text"
                class="form-control"
                id="inputEmail"
                name="email"
                placeholder="email@example.com"
                required
              />
            </div>
            </div>
        
            <div class="mb-3 row">
              <label>Username</label>
              <div class="col-sm-10">
                <input
                  type="text"
                  class="form-control"
                  id="inputUsername"
                  name="username"
                  placeholder="example_123"
                  required
                />
              </div>
            </div>
            <div class="mb-3 row">
              <label>Password</label>
              <div class="col-sm-10">
                <input
                  type="password"
                  class="form-control"
                  id="inputPassword"
                  name="password"
                  required
                />
              </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-success mb-3">Registrar</button>
                <button class="btn btn-danger mb-3 logueado">Ya tengo Cuenta</button>
            </div>
    </form>
    </div>


    <!-- Form Login -->
    <div class="container px-4 px-lg-5 mt-5">
      <form action="{{ path('user_login') }}" method="post" id="userLogin" style="display: none;">
        <h3 class="mb-3">Ingreso Usuarios Registrados</h3>
        
            <div class="mb-3 row">
              <label>Username</label>
              <div class="col-sm-10">
                <input
                  type="text"
                  class="form-control"
                  id="inputUsernameL"
                  name="usernameL"
                  placeholder="example_123"
                  required
                />
              </div>
            </div>
            <div class="mb-3 row">
              <label>Password</label>
              <div class="col-sm-10">
                <input
                  type="password"
                  class="form-control"
                  id="inputPasswordL"
                  name="passwordL"
                  required
                />
              </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-success mb-3">Ingresar</button>
                <button class="btn btn-danger mb-3 volver">No tengo Cuenta</button>
            </div>
    </form>
    </div>


    <!--PRODUCTOS-->
    <div class="container px-4 px-lg-5 mt-5">
      <h4>Productos</h4>
    <form action="" method="post" id="allProducts">
      <div class="form-floating">
        <input type="text" class="form-control" id="productInput" placeholder="Ej: Bicicleta">
        <label for="floatingInput">Buscar</label>
      </div>
      <div class="mb-5" id="btnsProduct" style="display: none;">
        <button type="button" class="btn btn-success mt-1" id="createProductBtn">Crear Nuevo</button>
      </div>
      <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-3">
        {% for p in products %}
        <div class="col mb-5 product-card" value="{{p.id}}" id="productSelected">
            <div class="card h-60">
                <!-- Product image-->
                <div class="zoomable-image-container">
                  <img id="productImg" class="card-img-top fixed-size-img zoomable-image" src="{{p.image}}" alt="{{p.name}}" style="object-fit: cover; background-position: center top;"/>

                </div>
                <!-- Product details-->
                <div class="card-body p-4">
                    <div class="text-center">
                        <!-- Product name-->
                        <h5 id="productName" class="fw-bolder product-name" value="">{{p.name}}</h5>
                        <!-- Product Category-->
                        <p id="productCategoryName" value="">{{p.category.name}}</p>
                    </div>
                </div>
                <!-- Product actions-->
                <div class="card-footer p-4 pt-0 border-top-0 bg-transparent text-center divProductBM" id="divProductBM" style="display: none;">
                  <button type="button" class="btn btn-info mt-1" id="modifyProductBtn">Modificar</button>
                  <button type="button"  class="btn btn-danger mt-1 delete-btn" id="deleteProductBtn">Eliminar</button>
                </div>
            </div>
        </div>
        {% endfor %}
      </div> 
    </form>
  </div>



</div>

<!--**********************************   SCRIPTS    ******************************************************************-->


<!--Script Modal p/ Crear/Modificar Categorías-->
<script>
  document.addEventListener('DOMContentLoaded', async (event) => {
    const createCategoryBtn = document.getElementById('createCategoryBtn');
    const modifyCategoryBtn = document.getElementById('modifyCategoryBtn');
    const categoryModal = new bootstrap.Modal(document.getElementById('categoryModal'));
    const categoryModalLabel = document.getElementById('categoryModalLabel');
    const categoryNameInput = document.getElementById('categoryName');
    const categoryIconInput = document.getElementById('categoryIcon');
    const saveCategoryBtn = document.getElementById('saveCategory');
    const frmModalCategory = document.getElementById('categoryForm');
    let isEditing = false;
    let categoryId = null;

    const categoryEditUrlBase = "{{ path('category_edit', { 'id': 'ID_PLACEHOLDER' }) }}";
    const categoryNewUrl = "{{ path('category_new') }}";

    createCategoryBtn.addEventListener('click', () => {
        isEditing = false;
        categoryId = null;
        frmModalCategory.action = categoryNewUrl;
        categoryModalLabel.textContent = 'Crear Categoría';
        categoryModal.show();
    });


    modifyCategoryBtn.addEventListener('click', async () => {
      isEditing = true;
      categoryId = document.getElementById('categorySelect').value;
      frmModalCategory.action = categoryEditUrlBase.replace('ID_PLACEHOLDER', categoryId);
      categoryModalLabel.textContent = 'Modificar Categoría';

      try {
        const response = await fetch(`category/category/${categoryId}`, {
          method: 'GET',
          headers: {
              'X-Requested-With': 'XMLHttpRequest'
          }
          });
          const data = await response.json();
          if (data.status === 'success') {
              categoryNameInput.value = data.category.name;
              categoryIconInput.value = data.category.icon;
          } else {
              alert('Error al cargar los datos de la categoría');
          }
      } catch (error) {
          console.error('Error:', error);
      }

      categoryModal.show();
  });

    
    frmModalCategory.addEventListener('submit', async (event) => {
        event.preventDefault(); 
        const url = frmModalCategory.action;
        const categoryName = categoryNameInput.value;
        const categoryIcon = categoryIconInput.value;
        const categoryId = document.getElementById('categorySelect').value;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `categoryName=${encodeURIComponent(categoryName)}&categoryIcon=${encodeURIComponent(categoryIcon)}&categoryID=${encodeURIComponent(categoryId)}`
            });

            const data = await response.json();

            if (data.status === 'success') {                
                categoryModal.hide();
                categoryNameInput.value = ''; 
                categoryIconInput.value = '';

                // Actualizar la interfaz sin recargarla
                const categorySelect = document.getElementById('categorySelect');
                if (isEditing) {
                  // Si estás editando, actualiza la opción existente
                  const optionToUpdate = categorySelect.querySelector(`option[value="${categoryId}"]`);
                  if (optionToUpdate) {
                      optionToUpdate.textContent = categoryName;
                      optionToUpdate.setAttribute('data-icon', categoryIcon);
                  }
              } else {
                  // Si estás creando una nueva categoría, añade una nueva opción
                  const newOption = document.createElement('option');
                  newOption.value = data.newCategoryId; 
                  newOption.textContent = categoryName;
                  newOption.setAttribute('data-icon', categoryIcon);
                  categorySelect.appendChild(newOption); 
              }


            } else {
                console.error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
});

</script>

<!--Script Modal p/ Crear/Modificar Productos-->
<script>
  document.addEventListener('DOMContentLoaded', async (event) => {
    
    const createProductBtn = document.getElementById('createProductBtn');
    const productModal = new bootstrap.Modal(document.getElementById('productModal'));
    const productModalLabel = document.getElementById('productModalLabel');
    const productNameInput = document.getElementById('productName');
    const productImgInput = document.getElementById('productImg');
    const productCategorySelect = document.getElementById('productCategorySelect');
    const saveProductBtn = document.getElementById('saveProduct');
    const frmModalProduct = document.getElementById('productForm');
    let isEditing = false;
    let productId = null;

    const productEditUrlBase = "{{ path('product_edit', { 'id': 'ID_PLACEHOLDER' }) }}";
    const productNewUrl = "{{ path('product_new') }}";
    const productDetailsUrlBase = "{{ path('product_details', { 'id': 'ID_PLACEHOLDER' }) }}";

    createProductBtn.addEventListener('click', () => {
        isEditing = false;
        productId = null;
        frmModalProduct.action = productNewUrl;
        productModalLabel.textContent = 'Crear Producto';
        productModal.show();
    });

    document.querySelectorAll('.product-card').forEach(card => {
      const modifyProductBtn = card.querySelector('#modifyProductBtn');
      
      modifyProductBtn.addEventListener('click', async () => {
          isEditing = true;
          productId = card.getAttribute('value');
          frmModalProduct.action = productEditUrlBase.replace('ID_PLACEHOLDER', productId);
          productModalLabel.textContent = 'Modificar Producto';

          // Trae los datos del Producto en cuestión
          try {
              const response = await fetch(productDetailsUrlBase.replace('ID_PLACEHOLDER', productId), {
                  method: 'GET',
                  headers: {
                      'X-Requested-With': 'XMLHttpRequest'
                  }
              });
              const data = await response.json();
              if (data.status === 'success') {
                  productNameInput.value = data.product.name;
                  productImgInput.value = data.product.image;
                  productCategorySelect.value = data.product.category.id;
              } else {
                  alert('Error al cargar los datos del producto');
              }
          } catch (error) {
              console.error('Error:', error);
          }

          productModal.show();
      });
  });

    frmModalProduct.addEventListener('submit', async (event) => {
        event.preventDefault(); 
        const url = frmModalProduct.action;
        const productName = productNameInput.value;
        const productImg = productImgInput.value;
        const productCategory = productCategorySelect.value;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `productName=${encodeURIComponent(productName)}&productImg=${encodeURIComponent(productImg)}&productCategory=${encodeURIComponent(productCategory)}`
            });

            const data = await response.json();

            if (data.status === 'success') {                
                productModal.hide();
                productNameInput.value = ''; 
                productImgInput.value = '';

                if (isEditing) {
                    const productCard = document.querySelector(`.product-card[value="${productId}"]`);
                    productCard.querySelector('#productImg').src = productImg;
                    productCard.querySelector('#productName').textContent = productName;
                    productCard.querySelector('#productCategoryName').textContent = productCategorySelect.options[productCategorySelect.selectedIndex].text;
                } else {
                    const productContainer = document.querySelector('.row');
                    productContainer.insertAdjacentHTML('beforeend', data.productHtml);
                    const newProductCard = productContainer.querySelector(`.product-card[value="${data.newProductId}"]`);

                    newProductCard.querySelector('#modifyProductBtn').addEventListener('click', async () => {
                        isEditing = true;
                        productId = newProductCard.getAttribute('value');
                        frmModalProduct.action = productEditUrlBase.replace('ID_PLACEHOLDER', productId);
                        productModalLabel.textContent = 'Modificar Producto';

                        try {
                            const response = await fetch(`product/product/${productId}`, {
                                method: 'GET',
                                headers: {
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            });
                            const data = await response.json();
                            if (data.status === 'success') {
                                productNameInput.value = data.product.name;
                                productImgInput.value = data.product.image;
                                productCategorySelect.value = data.product.category.id;
                            } else {
                                alert('Error al cargar los datos del producto');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                        }

                        productModal.show();
                    });
                }
            } else {
                console.error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
});

</script>
    
<!--Script Login Usuarios-->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const btnLogueado = document.querySelector('.logueado');
    const btnVolver = document.querySelector('.volver');
    const formRegistro = document.getElementById('userRegistro');
    const formLogin = document.getElementById('userLogin');
    const divLogueado = document.getElementById('usrLogueado');
    const nombreUsuario = document.getElementsByName('usernameL');
    const btnsProduct = document.getElementById('btnsProduct');
    const btnsProductBM = document.getElementById('divProductBM') 


    if (btnLogueado) {
        btnLogueado.addEventListener('click', function(event) {
            event.preventDefault();
            formRegistro.style.display = 'none';
            formLogin.style.display = 'block';
        });
    }

    if (btnVolver) {
        btnVolver.addEventListener('click', function(event) {
            event.preventDefault();
            formLogin.style.display = 'none';
            formRegistro.style.display = 'block';
        });
    }

    formLogin.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(formLogin);

        try {
            const response = await fetch(formLogin.action, {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (data.logued) {
                formLogin.style.display = 'none';
                formRegistro.style.display = 'none';
                divLogueado.style.display = 'block';
                btnsProduct.style.display = 'block';
                document.querySelectorAll('.divProductBM').forEach(function(div) {
                  div.style.display = 'block';
              });
            } else {
                showMessage(data.message, 'danger');
                formRegistro.style.display = 'none';
                formLogin.style.display = 'block';
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage('Ocurrió un error. Por favor, intente de nuevo', 'danger');
        }
    });
});
    
</script>

<!--Script Lista Categorías y Eliminar-->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
      const categorySelect = document.getElementById('categorySelect');
      const categoryLstFrm = document.getElementById('lstCategorias');
      const deleteCategoryBtn = document.getElementById('deleteCategoryBtn');
      const modifyCategoryBtn = document.getElementById('modifyCategoryBtn');
      const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
      const frmEliminar = document.getElementById('frmEliminar');
      let categoryIdToDelete = null;

      
      // Load categories
      try {
          const response = await fetch(categoryLstFrm.action);
          const data = await response.json();
  
          if (data.status === 'success') {
              data.categories.forEach(category => {
                  const option = document.createElement('option');
                  option.value = category.id;
                  option.textContent = category.name;
                  categorySelect.appendChild(option);
              });
          } else {
              console.error('Error al cargar las categorías');
          }
      } catch (error) {
          console.error('Error:', error);
      }
  
      // Open delete modal
      deleteCategoryBtn.addEventListener('click', function() {
          categoryIdToDelete = categorySelect.value;
          if (categoryIdToDelete) {
              deleteModal.show();
          } else {
              alert('Seleccione una categoría para eliminar.');
          }
      });
      //Habilitar/Deshabilitar boton Eliminar y Modificar
      function updateDeleteButtonState() {
        const selectedOption = categorySelect.options[categorySelect.selectedIndex];
        if (selectedOption && selectedOption.id === 'defaultOption') {
            deleteCategoryBtn.disabled = true;
            modifyCategoryBtn.disabled = true;
        } else {
            deleteCategoryBtn.disabled = false;
            modifyCategoryBtn.disabled = false;
        }
    }
      categorySelect.addEventListener('change', updateDeleteButtonState);
      updateDeleteButtonState();

      //Boton Cerrar Sesion
      document.getElementById('cerrarSesion').addEventListener('click', function() {
        window.location.href = '/';
    });


      // Handle form submission for deletion
      frmEliminar.addEventListener('submit', async function(event) {
          event.preventDefault();
          if (categoryIdToDelete) {
              try {
                  const response = await fetch(`/category/delete/${categoryIdToDelete}`, {
                      method: 'DELETE',
                      headers: {
                          'X-Requested-With': 'XMLHttpRequest'
                      }
                  });
                  const data = await response.json();
                  if (data.status === 'success') {
                      alert(data.message);
                      deleteModal.hide();
                      await loadCategories();
                      updateDeleteButtonState();           
                    } 
                    else {
                      alert('Error al eliminar la categoría.');
                  }
              } catch (error) {
                  console.error('Error:', error);
              }
          }
      });
  });
  </script>

<!--Script para Eliminar Productos-->
<script>
  document.addEventListener('DOMContentLoaded', function() {
      const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
      const frmEliminar = document.getElementById('frmEliminar');
      let productIdToDelete = null;

      // Add event listeners to all delete buttons
      document.querySelectorAll('.delete-btn').forEach(button => {
          button.addEventListener('click', function(event) {
              productIdToDelete = event.target.closest('.product-card').getAttribute('value');
              if (productIdToDelete) {
                  deleteModal.show();
              } else {
                  alert('Seleccione un producto para eliminar.');
              }
          });
      });

      // Handle form submission for deletion
      frmEliminar.addEventListener('submit', async function(event) {
          event.preventDefault();
          if (productIdToDelete) {
              try {
                  const response = await fetch(`/product/delete/${productIdToDelete}`, {
                      method: 'DELETE',
                      headers: {
                          'X-Requested-With': 'XMLHttpRequest'
                      }
                  });
                  const data = await response.json();
                  if (data.status === 'success') {
                      alert(data.message);
                      deleteModal.hide();
                      // Remove the product card from the DOM
                      document.querySelector(`.product-card[value="${productIdToDelete}"]`).remove();
                  } else {
                      alert('Error al eliminar el producto.');
                  }
              } catch (error) {
                  console.error('Error:', error);
              }
          }
      });
  });
</script>

<!--Script para recargar Select-->
<script>
  async function loadCategories() {
    const categorySelect = document.getElementById('categorySelect');
    const categoryLstFrm = document.getElementById('lstCategorias');
    const deleteCategoryBtn = document.getElementById('deleteCategoryBtn');


    try {
        const response = await fetch(categoryLstFrm.action);
        const data = await response.json();
        
        if (data.status === 'success') {
            // Limpiar el select antes de añadir las nuevas opciones
            categorySelect.innerHTML = '<option selected disabled>Categorías</option>';
            data.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });

        } else {
            console.error('Error al cargar las categorías');
        }
    } catch (error) {
        console.error('Error:', error);
    }
}
</script>
<!--Script para Buscador-->
<script>
  document.addEventListener('DOMContentLoaded', (event) => {
      const searchInput = document.getElementById('productInput');
      const productCards = document.querySelectorAll('.product-card');

      searchInput.addEventListener('input', () => {
          const searchTerm = searchInput.value.toLowerCase();
          productCards.forEach(card => {
              const productName = card.querySelector('.product-name').textContent.toLowerCase();
              if (productName.includes(searchTerm)) {
                  card.style.display = 'block';
              } else {
                  card.style.display = 'none';
              }
          });
      });
  });
</script>

<!--Script para Mensajes-->
<script>
  function showMessage(message, type) {
    const messageContainer = document.getElementById('message-container');
    messageContainer.innerHTML = `<div class="alert alert-${type}">${message} <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
}
</script>

<!-- Script Zoom imgs-->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const zoomableImages =
      document.querySelectorAll(".zoomable-image");

    zoomableImages.forEach(function (image) {
      image.addEventListener("click", function () {
        const zoomedContainer = document.createElement("div");
        zoomedContainer.classList.add("zoomed-image-container");

        const zoomedImage = document.createElement("img");
        zoomedImage.classList.add("zoomed-image");
        zoomedImage.src = image.src;
        zoomedImage.alt = image.alt;

        zoomedContainer.appendChild(zoomedImage);
        document.body.appendChild(zoomedContainer);

        zoomedContainer.addEventListener("click", function () {
          zoomedContainer.remove();
        });
        document.addEventListener("keydown", function (event) {
          if (event.key === "Escape") {
            zoomedContainer.remove();
          }
        });
      });
    });
  });
</script>

  {% endblock %} 
  {% block stylesheets %}
  <style>
    .fondo {
      background: #ffefba; /* fallback for old browsers */
      background: -webkit-linear-gradient(
        to right,
        #ffffff,
        #ffefba
      ); /* Chrome 10-25, Safari 5.1-6 */
      background: linear-gradient(
        to right,
        #ffffff,
        #ffefba
      ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    }
    /* styles.css */

.alert {
  padding: 15px;
  margin: 20px 0;
  border: 1px solid transparent;
  border-radius: 4px;
}

.alert-success {
  color: #155724;
  background-color: #d4edda;
  border-color: #c3e6cb;
}

.alert-error {
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb;
}

.position-relative {
  position: relative;
}

.position-absolute {
  position: absolute;
}

.top-right {
  top: 0;
  right: 0;
  margin: 10px;
}
a.btnC {
  text-decoration: none; /* Elimina el subrayado */
  color: inherit; /* Hereda el color del texto */
  /*cursor: pointer;  Cambia el cursor a un puntero */
  background: none; /* Elimina cualquier fondo */
  border: none; /* Elimina cualquier borde */
  padding: 0; /* Elimina el relleno */
  margin: 0; /* Elimina el margen */
  font: inherit;
}
.fixed-size-img {
  width: 100%;
  height: 200px; /* Ajusta esta altura según tus necesidades */
  object-fit: cover;
}
.zoomable-image-container {
  cursor: zoom-in; /* Cambia el cursor al pasar sobre la imagen */
}

.zoomed-image-container {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1050;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5); /* Fondo oscuro */
  display: flex;
  justify-content: center;
  align-items: center;
}

.zoomed-image {
  max-width: 90%;
  max-height: 90%;
}
  </style>
  {% endblock %}

