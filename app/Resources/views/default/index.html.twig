{% extends 'base.html.twig' %} 
{% block body %}
<div class="container mt-5">
    {% for label, messages in app.session.flashBag.all() %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }}">
                        {{ message }}
                    </div>
                {% endfor %}
    {% endfor %}
    
    <form action="{{ path('user_new') }}" method="post" id="userRegistro">
        <h3 class="mb-3">Registro de Nuevos Usuarios</h3>
        <div class="mb-3 row">
            <label>Email</label>
            <div class="col-sm-10">
              <input
                type="text"
                class="form-control"
                id="inputEmail"
                name="email"
                placeholder="email@example.com"
                required
              />
            </div>
            </div>
        
            <div class="mb-3 row">
              <label>Username</label>
              <div class="col-sm-10">
                <input
                  type="text"
                  class="form-control"
                  id="inputUsername"
                  name="username"
                  placeholder="example_123"
                  required
                />
              </div>
            </div>
            <div class="mb-3 row">
              <label>Password</label>
              <div class="col-sm-10">
                <input
                  type="password"
                  class="form-control"
                  id="inputPassword"
                  name="password"
                  required
                />
              </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-success mb-3">Registrar</button>
                <button class="btn btn-danger mb-3 logueado">Ya tengo Cuenta</button>
            </div>
    </form>

    <form action="{{ path('user_login') }}" method="post" id="userLogin" style="display: none;">
        <h3 class="mb-3">Ingreso Usuarios Registrados</h3>
        <div class="mb-3 row">
            <label>Email</label>
            <div class="col-sm-10">
              <input
                type="text"
                class="form-control"
                id="inputEmail"
                name="email"
                placeholder="email@example.com"
                required
              />
            </div>
            </div>
        
            <div class="mb-3 row">
              <label>Username</label>
              <div class="col-sm-10">
                <input
                  type="text"
                  class="form-control"
                  id="inputUsername"
                  name="username"
                  placeholder="example_123"
                  required
                />
              </div>
            </div>
            <div class="mb-3 row">
              <label>Password</label>
              <div class="col-sm-10">
                <input
                  type="password"
                  class="form-control"
                  id="inputPassword"
                  name="password"
                  required
                />
              </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-success mb-3">Ingresar</button>
                <button class="btn btn-danger mb-3 volver">No tengo Cuenta</button>
            </div>
    </form>

    <div class="container mt-5" id="usrLogueado">
        <h3>Contenido exclusivo para usuarios registrados.</h3>
        <br>
        <h4>Gestionar Categorías</h4>
        <form action="">
            <select class="form-select" aria-label="Default select example" id="categorySelect">
                <option selected disabled>Categorías</option>
               
                    <option value="category.id" name="category.name">category.name</option>
                
            </select>
            <button type="button" class="btn btn-info mt-1" id="modifyCategoryBtn">Modificar</button>
            <a href="" class="btn btn-danger mt-1">Eliminar</a>
            <button type="button" class="btn btn-success mt-1" id="createCategoryBtn">Crear</button>
        </form>
        
        <!-- Modal -->
    <div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="categoryModalLabel">Crear/Modificar Categoría</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="categoryForm">
            <div class="form-group">
              <input type="text" class="form-control" id="categoryName" placeholder="Nombre Categoría" name="categoryName" required>
            </div>
            <div class="form-group">
              <input type="text" class="form-control" id="categoryIcon" placeholder="Src del Ícono" name="categoryIcon">
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
          <button type="button" class="btn btn-primary" id="saveCategory">Guardar</button>
        </div>
      </div>
    </div>
    </div>
  
    </div>
</div>
<!--Script Modal Categorías-->
<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        const createCategoryBtn = document.getElementById('createCategoryBtn');
        const modifyCategoryBtn = document.getElementById('modifyCategoryBtn');
        const categoryModal = new bootstrap.Modal(document.getElementById('categoryModal'));
        const categoryModalLabel = document.getElementById('categoryModalLabel');
        const categoryNameInput = document.getElementById('categoryName');
        const categoryIconInput = document.getElementById('categoryIcon');
        const saveCategoryBtn = document.getElementById('saveCategory');
        let isEditing = false;
        let categoryId = null;
    
        createCategoryBtn.addEventListener('click', () => {
            isEditing = false;
            categoryId = null;
            categoryModalLabel.textContent = 'Crear Categoría';
            categoryNameInput.value = '';
            categoryIconInput.value = '';
            categoryModal.show();
        });
    
        modifyCategoryBtn.addEventListener('click', () => {
            isEditing = true;
            // Aquí deberías obtener el ID y los valores actuales de la categoría seleccionada
            categoryId = document.getElementById('categorySelect').value;
            categoryModalLabel.textContent = 'Modificar Categoría';
            categoryNameInput.value = 'Modificar Nombre'; // Reemplazar con el valor real
            categoryIconInput.value = 'Modificar Src Icono'; // Reemplazar con el valor real
            categoryModal.show();
        });
    
        saveCategoryBtn.addEventListener('click', () => {
            const categoryName = categoryNameInput.value;
            const categoryIcon = categoryIconInput.value;
            const url = isEditing ? `/category/edit/${categoryId}` : '/category/new';
            
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: `name=${encodeURIComponent(categoryName)}&icon=${encodeURIComponent(categoryIcon)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    console.log(data.message);
                    // Aquí puedes actualizar la interfaz de usuario o redirigir si es necesario
                    categoryModal.hide();
                } else {
                    console.error(data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });
    });    
</script>
    
<!--Script Login Usuarios-->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const btnLogueado = document.querySelector('.logueado');
    const btnVolver = document.querySelector('.volver');
    const formRegistro = document.getElementById('userRegistro');
    const formLogin = document.getElementById('userLogin');

    if (btnLogueado) {
        btnLogueado.addEventListener('click', function() {
            formRegistro.style.display = 'none';
            formLogin.style.display = 'block';
        });
    }

    if (btnVolver) {
        btnVolver.addEventListener('click', function() {
            formLogin.style.display = 'none';
            formRegistro.style.display = 'block';
        });
    }

    formLogin.addEventListener('submit', function(e) {
        e.preventDefault();

        const formData = new FormData(formLogin);

        fetch(formLogin.action, {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            if (data.logued) {
                // Oculta el formulario de inicio de sesión
                formLogin.style.display = 'none';
                const divLogueado = document.getElementById('usrLogueado');
                divLogueado.style.display = 'block';
            } else {
                alert(data.message);
            }
        });
    });
});
    
</script>
  <!--Script Buscador-->
  <script>
    (function (document) {
      "buscador";

      var LightTableFilter = (function (Arr) {
        var _input;

        function _onInputEvent(e) {
          _input = e.target;
          var tables = document.getElementsByClassName(
            _input.getAttribute("data-table")
          );
          Arr.forEach.call(tables, function (table) {
            Arr.forEach.call(table.tBodies, function (tbody) {
              Arr.forEach.call(tbody.rows, _filter);
            });
          });
        }

        function _filter(row) {
          var text = row.textContent.toLowerCase(),
            val = _input.value.toLowerCase();
          row.style.display = text.indexOf(val) === -1 ? "none" : "table-row";
        }

        return {
          init: function () {
            var inputs = document.getElementsByClassName("light-table-filter");
            Arr.forEach.call(inputs, function (input) {
              input.oninput = _onInputEvent;
            });
          },
        };
      })(Array.prototype);

      document.addEventListener("readystatechange", function () {
        if (document.readyState === "complete") {
          LightTableFilter.init();
        }
      });
    })(document);
  </script>

  {% endblock %} 
  {% block stylesheets %}
  <style>
    .fondo {
      background: #ffefba; /* fallback for old browsers */
      background: -webkit-linear-gradient(
        to right,
        #ffffff,
        #ffefba
      ); /* Chrome 10-25, Safari 5.1-6 */
      background: linear-gradient(
        to right,
        #ffffff,
        #ffefba
      ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    }
  </style>
  {% endblock %}

