{% extends 'base.html.twig' %} 
{% block body %}
<div class="container mt-5">
    {% for label, messages in app.session.flashBag.all() %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
    {% endfor %}
  <!-- Div para mensajes de error o éxito -->
  <div id="message-container"  class="alert-dismissible fade show">
  </div>
    <!-- Form Registro -->
    <form action="{{ path('user_new') }}" method="post" id="userRegistro">
        <h3 class="mb-3">Registro de Nuevos Usuarios</h3>
        <div class="mb-3 row">
            <label>Email</label>
            <div class="col-sm-10">
              <input
                type="text"
                class="form-control"
                id="inputEmail"
                name="email"
                placeholder="email@example.com"
                required
              />
            </div>
            </div>
        
            <div class="mb-3 row">
              <label>Username</label>
              <div class="col-sm-10">
                <input
                  type="text"
                  class="form-control"
                  id="inputUsername"
                  name="username"
                  placeholder="example_123"
                  required
                />
              </div>
            </div>
            <div class="mb-3 row">
              <label>Password</label>
              <div class="col-sm-10">
                <input
                  type="password"
                  class="form-control"
                  id="inputPassword"
                  name="password"
                  required
                />
              </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-success mb-3">Registrar</button>
                <button class="btn btn-danger mb-3 logueado">Ya tengo Cuenta</button>
            </div>
    </form>

    <!-- Form Login -->
    <form action="{{ path('user_login') }}" method="post" id="userLogin" style="display: none;">
        <h3 class="mb-3">Ingreso Usuarios Registrados</h3>
        
            <div class="mb-3 row">
              <label>Username</label>
              <div class="col-sm-10">
                <input
                  type="text"
                  class="form-control"
                  id="inputUsernameL"
                  name="usernameL"
                  placeholder="example_123"
                  required
                />
              </div>
            </div>
            <div class="mb-3 row">
              <label>Password</label>
              <div class="col-sm-10">
                <input
                  type="password"
                  class="form-control"
                  id="inputPasswordL"
                  name="passwordL"
                  required
                />
              </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-success mb-3">Ingresar</button>
                <button class="btn btn-danger mb-3 volver">No tengo Cuenta</button>
            </div>
    </form>

  <!-- Div Usr Logueado -->
    <div class="container mt-5" id="usrLogueado" style="display: none;">
        <h3>Bienvenido!.</h3>
        <br>
        <div>
          <h4>Gestionar Categorías</h4>
        <form action="{{ path('category_index') }}" method="post" id="lstCategorias">
            <select class="form-select" aria-label="Default select example" id="categorySelect">
                <option selected disabled>Categorías</option>
            </select>
            <button type="button" class="btn btn-info mt-1" id="modifyCategoryBtn">Modificar</button>
            <a  class="btn btn-danger mt-1">Eliminar</a>
            <button type="button" class="btn btn-success mt-1" id="createCategoryBtn">Crear</button>
        </form>
        </div>
        
        <!-- Modal Categorías-->
    <div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="categoryModalLabel">Crear/Modificar Categoría</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
      <form id="categoryForm" method="post">
        <div class="modal-body">
            <div class="form-group">
              <input type="text" class="form-control" id="categoryName" placeholder="Nombre Categoría" name="categoryName" required>
            </div>
            <div class="form-group">
              <input type="text" class="form-control" id="categoryIcon" placeholder="Src del Ícono" name="categoryIcon">
            </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
          <button type="submit" class="btn btn-primary" id="saveCategory" data-dismiss="modal">Guardar</button>
        </div>
      </form>

      </div>
    </div>
    </div>
  
    </div>
</div>
<!--Script Modal p/ Crear/Modificar Categorías-->
<script>
  document.addEventListener('DOMContentLoaded', (event) => {
    const createCategoryBtn = document.getElementById('createCategoryBtn');
    const modifyCategoryBtn = document.getElementById('modifyCategoryBtn');
    const categoryModal = new bootstrap.Modal(document.getElementById('categoryModal'));
    const categoryModalLabel = document.getElementById('categoryModalLabel');
    const categoryNameInput = document.getElementById('categoryName');
    const categoryIconInput = document.getElementById('categoryIcon');
    const saveCategoryBtn = document.getElementById('saveCategory');
    const frmModalCategory = document.getElementById('categoryForm');
    let isEditing = false;
    let categoryId = null;

    const categoryEditUrlBase = "{{ path('category_edit', { 'id': 'ID_PLACEHOLDER' }) }}";
    const categoryNewUrl = "{{ path('category_new') }}";

    createCategoryBtn.addEventListener('click', () => {
        isEditing = false;
        categoryId = null;
        frmModalCategory.action = categoryNewUrl;
        categoryModalLabel.textContent = 'Crear Categoría';
        categoryModal.show();
    });

    modifyCategoryBtn.addEventListener('click', () => {
        isEditing = true;
        categoryId = document.getElementById('categorySelect').value;
        frmModalCategory.action = categoryEditUrlBase.replace('ID_PLACEHOLDER', categoryId);
        categoryModalLabel.textContent = 'Modificar Categoría';
        categoryNameInput.value = 'Modificar Nombre'; // Reemplazar con el valor real
        categoryIconInput.value = 'Modificar Src Icono'; // Reemplazar con el valor real
        categoryModal.show();
    });

    
    frmModalCategory.addEventListener('submit', (event) => {
      event.preventDefault(); // Para evitar el envío tradicional del formulario
      const url = frmModalCategory.action;
      const categoryName = categoryNameInput.value;
      const categoryIcon = categoryIconInput.value;
  
      fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'},
          body: `categoryName=${encodeURIComponent(categoryName)}&categoryIcon=${encodeURIComponent(categoryIcon)}`})
      .then(response => response.json())
      .then(data => {
          if (data.status === 'success') {
              showMessage('Categoría registrada correctamente!', 'success');
              categoryModal.hide();
  
              // Actualizar la interfaz sin recargarla
              const categorySelect = document.getElementById('categorySelect');
              if (isEditing) {
                  // Si estás editando, actualiza la opción existente
                  const optionToUpdate = categorySelect.querySelector(`option[value="${categoryId}"]`);
                  if (optionToUpdate) {
                      optionToUpdate.textContent = categoryName;
                      optionToUpdate.setAttribute('data-icon', categoryIcon);
                  }
              } else {
                  // Si estás creando una nueva categoría, añade una nueva opción
                  const newOption = document.createElement('option');
                  newOption.value = data.newCategoryId; // Suponiendo que el servidor devuelve el ID de la nueva categoría
                  newOption.textContent = categoryName;
                  newOption.setAttribute('data-icon', categoryIcon);
                  categorySelect.appendChild(newOption);
              }
  
          } else {
              console.error(data.message);
          }
      })
      .catch(error => {
          console.error('Error:', error);
      });
  });
  
});   
</script>
    
<!--Script Login Usuarios-->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const btnLogueado = document.querySelector('.logueado');
    const btnVolver = document.querySelector('.volver');
    const formRegistro = document.getElementById('userRegistro');
    const formLogin = document.getElementById('userLogin');
    const divLogueado = document.getElementById('usrLogueado');
    const messageContainer = document.getElementById('message-container');
    const nombreUsuario = document.getElementsByName('usernameL');

    function showMessage(message, type) {
        messageContainer.inSnerHTML = `<div class="alert alert-${type}">${message} <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
    }

    if (btnLogueado) {
        btnLogueado.addEventListener('click', function(event) {
            event.preventDefault();
            formRegistro.style.display = 'none';
            formLogin.style.display = 'block';
        });
    }

    if (btnVolver) {
        btnVolver.addEventListener('click', function(event) {
            event.preventDefault();
            formLogin.style.display = 'none';
            formRegistro.style.display = 'block';
        });
    }

    formLogin.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = new FormData(formLogin);

        try {
            const response = await fetch(formLogin.action, {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (data.logued) {
                formLogin.style.display = 'none';
                divLogueado.style.display = 'block';
                showMessage('Logueado exitosamente!', 'success');
            } else {
                showMessage(data.message, 'danger');
                formRegistro.style.display = 'none';
                formLogin.style.display = 'block';
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage('Ocurrió un error. Por favor, intente de nuevo', 'danger');
        }
    });
});
    
</script>
<!--Script Lista Categorías-->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
      const categorySelect = document.getElementById('categorySelect');
      const categoryLstFrm = document.getElementById('lstCategorias');
  
      try {
          const response = await fetch(categoryLstFrm.action);
          const data = await response.json();
  
          if (data.status === 'success') {
              data.categories.forEach(category => {
                  const option = document.createElement('option');
                  option.value = category.id;
                  option.textContent = category.name;
                  categorySelect.appendChild(option);
              });
          } else {
              console.error('Error al cargar las categorías');
          }
      } catch (error) {
          console.error('Error:', error);
      }
  });
</script>
  <!--Script Buscador
  <script>
    (function (document) {
      "buscador";

      var LightTableFilter = (function (Arr) {
        var _input;

        function _onInputEvent(e) {
          _input = e.target;
          var tables = document.getElementsByClassName(
            _input.getAttribute("data-table")
          );
          Arr.forEach.call(tables, function (table) {
            Arr.forEach.call(table.tBodies, function (tbody) {
              Arr.forEach.call(tbody.rows, _filter);
            });
          });
        }

        function _filter(row) {
          var text = row.textContent.toLowerCase(),
            val = _input.value.toLowerCase();
          row.style.display = text.indexOf(val) === -1 ? "none" : "table-row";
        }

        return {
          init: function () {
            var inputs = document.getElementsByClassName("light-table-filter");
            Arr.forEach.call(inputs, function (input) {
              input.oninput = _onInputEvent;
            });
          },
        };
      })(Array.prototype);

      document.addEventListener("readystatechange", function () {
        if (document.readyState === "complete") {
          LightTableFilter.init();
        }
      });
    })(document);
  </script>-->

  {% endblock %} 
  {% block stylesheets %}
  <style>
    .fondo {
      background: #ffefba; /* fallback for old browsers */
      background: -webkit-linear-gradient(
        to right,
        #ffffff,
        #ffefba
      ); /* Chrome 10-25, Safari 5.1-6 */
      background: linear-gradient(
        to right,
        #ffffff,
        #ffefba
      ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    }
    /* styles.css */

.alert {
  padding: 15px;
  margin: 20px 0;
  border: 1px solid transparent;
  border-radius: 4px;
}

.alert-success {
  color: #155724;
  background-color: #d4edda;
  border-color: #c3e6cb;
}

.alert-error {
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb;
}

  </style>
  {% endblock %}

